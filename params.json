{
  "name": "Othello-ai",
  "tagline": " Lisp based Othello program designed to investigate AI game playing techniques. ",
  "body": "# othello-ai\r\n Lisp based Othello program designed to investigate AI game playing techniques. \r\n\r\n# Othello Game Description \r\nOthello, also known as Reversi, is a game played on an 8x8 grid with 64 discs \r\nthat are black on one side and white on the other. Based on the following \r\nstart position:\r\n\r\n    - - - - - - - -\r\n    - - - - - - - - \r\n    - - - - - - - - \r\n    - - - W B - - - \r\n    - - - B W - - - \r\n    - - - - - - - - \r\n    - - - - - - - - \r\n    - - - - - - - - \r\n\r\nthe two players (BLACK and WHITE) alternate turns placing discs on the board. \r\nIn order for a valid turn to be made, discs must be placed to surround enemy \r\npieces. Whenever a row, column, or diagonal of contiguous white pieces are \r\nsurrounded on both ends by black pieces, the white pieces are \"flipped\" to the \r\nblack side, making them black piecs. ( The opposite applies for flipping to \r\nwhite pieces, naturally. ) This is referred to as \"flanking\", or \"bracketing\".\r\n\r\nIn the following demonstration, The black player moves first, places a disc in \r\nrow 6, column 5. This causes the white disc in row 5, column 5 to flip to the \r\nblack side.\r\n\r\n    - - - - - - - -     - - - - - - - -     - - - - - - - - \r\n    - - - - - - - -     - - - - - - - -     - - - - - - - - \r\n    - - - - - - - -     - - - - - - - -     - - - - - - - - \r\n    - - - W B - - -  => - - - W B - - -  => - - - W B - - - \r\n    - - - B W - - -  => - - - B W - - -  => - - - B B - - -  \r\n    - - - - - - - -     - - - - B - - -     - - - - B - - - \r\n    - - - - - - - -     - - - - - - - -     - - - - - - - - \r\n    - - - - - - - -     - - - - - - - -     - - - - - - - - \r\n\r\nWhenever a player cannot place a disc that will bracket enemy pieces, that \r\nplayer must forfeit their current turn.\r\n\r\nThe game continues until either the board is filled, or once a scenario occurs \r\nin which neither player can perform a legal move. At this point, the number of \r\ndiscs are counted for each side and the player with the most discs is the\r\nvictor.\r\n\r\n# Program Description\r\nFor this project, a Lisp program has been implemented for the Othello game. \r\nThere are options for human vs human, human vs ai, and ai vs ai. The AI \r\nimplemented for this program is designed to investigate AI game playing \r\ntechniques. In particular, this program uses the minimax strategy with \r\nalpha-beta pruning.\r\n\r\n# Minimax\r\nMinimax is an algorithm that works well for two-player board games, and exists \r\nas a model for making moves based on knowledge of what the other player will do. \r\nThis algorithm opperates on the truism \"What is good for my opponent is bad for \r\nme\". The general idea of minimax is the \r\nfollowing:\r\n  1. Look at all available moves\r\n  2. Assign a rating to each board position that results form each move\r\n  3. Pick the move with the [minimum/maximum] point rating.\r\n\r\nThis algorithm alternates step 3 for minimum and maximum for the player \r\n[maximum] and their opponent [minimum]. One of the benefits of this method is \r\nthat the point ratings work for both the player moves and the opponent moves; \r\nalternating looking at minimum during opponent's turn and maximum during player \r\nturn is sufficient. Minimax is performed by creating a graph of available moves \r\nand performing depth-first search.\r\n\r\n( Minimax Description Source: Land of Lisp, Conrad Barski )\r\n\r\n# Alpha-beta Pruning\r\nAlpha beta pruning is a search algorithm that decreases the number of nodes \r\nneeded to be evaluated by the minimax algorithm. This algorithm stops \r\nevaluating a particular move when at least one possibility has been found \r\nthat renders the move to be worse than a previously examined move available \r\nfor the current player. As a result, the returned solution from minimax without \r\nalpha-beta pruning will be identical to the solution from minimax with \r\nalpha-beta pruning. The major difference is the amount of time saved by \r\nreducing the number of expanded nodes in the search algorithm.\r\n\r\n( Alpha-beta Pruning Source: https://en.wikipedia.org/wiki/Alpha-beta_pruning )\r\n\r\n# Board Weights for Heuristics\r\nThe following board is the value map used to determine how the AI \r\nprioritize movements:\r\n\r\n    32 01 16 08 08 16 01 32\r\n    01 01 02 02 02 02 01 01\r\n    16 02 04 04 04 04 02 16\r\n    08 02 04 02 02 04 02 08\r\n    08 02 04 02 02 04 02 08\r\n    16 02 04 04 04 04 02 16\r\n    01 01 02 02 02 02 01 01\r\n    32 01 16 08 08 16 01 32\r\n\r\nThe value map on the board causes the weighted-count \r\nheuristic to prioritize specific board positions. All of the weights were \r\nassigned as powers of 2.The folling is a list of the weighted regions and \r\nthe reasoning for those weights.\r\n\r\n* Corners 32: \r\n    Corners had originally been 16, however in testing the\r\n    ai gave them up too easily. 32 was a better value, \r\n    as this causes the ai to almost always prioritize corners when available.\r\n* Areas around corners 01: \r\n    Since the areas around corners will give your opponents an\r\n    opprotunity to take the corner they are the lowest score\r\n    on the list.\r\n* Outer Sides 16: \r\n    Outer sides seemed more important than the inner\r\n    sides when playing because they are harder to flank. \r\n    When they were previously equivilent the ai didn't properly \r\n    defend them which allowed the other player to build up a strong \r\n    side of the board more easily. \r\n* Inner Sides 8: \r\n    The inner sides are more important than the center board but the\r\n    easiest to flank so we set those up as the weakest of the sides\r\n    this makes the program build up a side from corner to the next.\r\n* 2nd Row/Col in 2: These spaces were set to 2  (the default weight) because\r\n    they open up an opportunity to take a side.\r\n* 3rd Row/Col in 4: These are usually safe moves so they are prioritized\r\n    over the standard value of 2. They also open the opponent to less\r\n    safe move.\r\n* Starting Positions: These are given the standard value of 2 as to not\r\n    over influence the game since they are both inconsequential and hard\r\n    to control.              \r\n\r\n# Program Usage\r\n* Command Line Usage:\r\n    \r\n    clisp othello.lsp (player: Black or White)\r\n\r\n* CLISP Usage:\r\n\r\n    (load 'othello)\r\n\r\n    ( othello [player] )\r\n\r\n# Othello Tournament\r\nFor the Spring 2016 CSC 447/547 course, we are holding an Othello tournament \r\nin which our program will compete against the programs written by other \r\nstudents in the course. in order to facilitate the programs playing against one \r\nanother, the following torunament functions have been supplied:\r\n\r\n* ( make-move position player ply ) \r\n\r\nThis function takes the current board position, the current player who has the \r\nnext move, and the depth of search (or ply, to look ahead in the game tree). \r\nIt returns a ( row col ) list that specifies the move selected by the minimax \r\nfunction, or NIL if no legal move exists.\r\n\r\n* ( othello-init )\r\n\r\nAnother tournament function is othello-init, which takes no arguments. This \r\nfunction is called once, prior to the start of tournament play. Initialization \r\ncode may be placed in this routine if necessary, but our implementation does \r\nnot use this function at all.\r\n\r\n# References\r\nA fair bit of research was put into this program for learning the rules to \r\nOthello and gaining an understanding for implementing our strategies. Some \r\nsites used for reference:\r\n* Reversi wikipedia page: https://en.wikipedia.org/wiki/Reversi\r\n* Othello wiki-how  page: http://www.wikihow.com/Play-Othello\r\n* Reversi Strategy Guide: http://www.samsoft.org.uk/reversi/strategy.htm\r\n* A-B Pruning wikipedia page: https://en.wikipedia.org/wiki/Alpha-beta_pruning\r\n* Land of Lisp Programming Book: http://dl.acm.org/citation.cfm?id=1951916\r\n\r\n# Authors\r\n* J. Anthony Brackins\r\n* Marcus Haberling\r\n\r\nWritten Spring 2016 for CSC447/547 AI class.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}